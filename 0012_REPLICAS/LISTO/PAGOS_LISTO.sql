----SEBAS

--MONEDEROS
--MonederoCreacion
(SELECT 
    'MONEDEROS no replicados (MONEDEROCOMANDOS vs PAGOSCOMMAND)' AS fuente,
    COUNT(0) AS discrepancias
FROM  PREP_MONEDEROCOMANDOS.MONEDERO t1
LEFT JOIN PREP_PAGOS.ESTADODECUENTA t2 ON t1.UIDMONEDERO = t2.UIDMONEDERO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 
AND t1.UIDTIPOSMONEDERO = '9be96cf8-4ee2-4762-9f77-7c817e851c03' --duda de si se va a usar este filtro
AND t2.UIDMONEDERO IS NULL
UNION ALL 

-- MonederoEstatus
SELECT --t1.UIDESTATUS, t2.UIDESTATUS
   'MONEDEROS diferencia en campo UIDESTATUS (MONEDEROCONSULTAS vs PAGOSCOMMAND)' AS fuente,
    COUNT(0) AS discrepancias
FROM  PREP_MONEDEROCONSULTAS.ESTADODECUENTA t1
INNER JOIN PREP_PAGOS.ESTADODECUENTA t2 ON t1.UIDMONEDERO = t2.UIDMONEDERO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND 
(t1.UIDESTATUS <> t2.UIDESTATUS OR t1.UIDMOTIVO <> t2.UIDMOTIVO OR t1.BACTIVO <> t2.BACTIVO OR t1.BBAJA  <> t2.BBAJA)
UNION ALL 

-- MonederoAbono MonederoDebito
SELECT --t1.DSALDO, t2.DSALDO
    'MONEDEROS diferencia en campo DSALDO (PAGOSCOMMAND vs MONEDEROCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM  PREP_MONEDEROCONSULTAS.ESTADODECUENTA t1
INNER JOIN PREP_PAGOS.ESTADODECUENTA t2 ON t1.UIDMONEDERO = t2.UIDMONEDERO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND (t1.DSALDO <> t2.DSALDO))

UNION ALL
-- TARJETAS
--CredencializacionTarjetaVendida
SELECT --t.UIDTARJETA, e.UIDESTADODECUENTA, e.UIDTARJETA
    'TARJETAS no replicadas (CREDENCIALIZACION vs PAGOSCOMMAND)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_CREDENCIALIZACION.TARJETAS t
LEFT JOIN  PREP_PAGOS.TARJETAS e ON ( e.UIDMONEDERO = t.UIDMONEDERO ) 
WHERE t.BACTIVO = 1 AND t.BBAJA = 0 AND t.BVENDIDA = 1 AND t.BINICIALIZADA = 1 AND t.BASOCIADA = 1 AND e.UIDTARJETA IS NULL 

-- TarjetaEstatus
UNION ALL
SELECT 
    'TARJETAS diferencias de campo UIDESTATUSTARJETA (PAGOSCOMMAND vs CREDENCIALIZACION)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.TARJETAS e 
INNER JOIN PREP_CREDENCIALIZACION.TARJETAS t ON (e.INUMEROTARJETA = t.INUMEROTARJETA) 
WHERE t.BACTIVO = 1 AND t.BBAJA = 0 AND 
(e.UIDESTATUSTARJETA <> t.UIDESTATUSTARJETA OR e.UIDESTATUSTARJETA <> t.UIDESTATUSTARJETA 
OR e.UIDMOTIVO <> t.UIDMOTIVO OR e.BBAJA <> t.BBAJA)

UNION ALL
-- MOTIVOS
-- MotivosCreacion
SELECT 
	'MOTIVOS no replicados (PREP_PAGOS vs PREP_CATALOGOS)' AS fuente,
	 COUNT(0) AS discrepancias
FROM PREP_CATALOGOS.MOTIVOS t1
LEFT JOIN PREP_PAGOS.MOTIVOS t2 ON t1.UIDMOTIVO  = t2.UIDMOTIVO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDMOTIVO  IS NULL
UNION ALL
--Diferencias en campos MotivosActualizacion200
SELECT 
	'MOTIVOS diferencias en campos (PREP_PAGOS vs PREP_CATALOGOS)' AS fuente,
	COUNT(0) AS discrepancias
FROM PREP_CATALOGOS.MOTIVOS t1
INNER JOIN PREP_PAGOS.MOTIVOS t2 ON t1.UIDMOTIVO  = t2.UIDMOTIVO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 
AND (t1.SMOTIVO <> t2.SMOTIVO 
OR t1.BACTIVO <> t2.BACTIVO 
OR t1.BBAJA <> t2.BBAJA 
OR t1.SDESCRIPCION <> t2.SDESCRIPCION
OR t1.ITIPO <> t2.ITIPO
OR t1.BPERMITIROPERACIONES <> t2.BPERMITIROPERACIONES
OR t1.BPERMITIRREACTIVAR <>  t2.BPERMITIRREACTIVAR
OR t1.BPERMITIREDITAR <> t2.BPERMITIREDITAR
)
UNION ALL

-- TIPOS OPERACIONES
-- Diferencias en registros TipoOperacionesComercioCreacion
(SELECT 
	'TIPOOPERACIONES no replicados (PREP_PAGOS vs PREP_CATALOGOS)' AS fuente,
	COUNT(0) AS discrepancias
FROM PREP_CATALOGOS.TIPOOPERACIONES t1
LEFT JOIN PREP_PAGOS.TIPOOPERACIONES t2 ON t1.UIDTIPOOPERACION  = t2.UIDTIPOOPERACION 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDTIPOOPERACION  IS NULL
UNION ALL
--Diferencias en campos TipoOperacionesComercioActualizacion
SELECT 
	'TIPOOPERACIONES diferencias en campos (PREP_PAGOS vs PREP_CATALOGOS)' AS fuente,
	COUNT(0) AS discrepancias
FROM  PREP_CATALOGOS.TIPOOPERACIONES t1
INNER JOIN PREP_PAGOS.TIPOOPERACIONES t2 ON t1.UIDTIPOOPERACION  = t2.UIDTIPOOPERACION 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 
AND (t1.SNOMBRE <> t2.SNOMBRE 
OR t1.SCLAVE <> t2.SCLAVE
OR t1.IMODULO <> t2.IMODULO
))

-- USUARIOS
-- duda porque son muchas discrepancias
UNION ALL
SELECT 
    'USUARIOS activos no replicados (APP vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_APP.USUARIO t1
LEFT JOIN PREP_PAGOS.USUARIO t2 ON t1.UIDUSUARIO = t2.UIDUSUARIO
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDUSUARIO IS NULL
UNION ALL
SELECT 
    'USUARIOS diferencias (APP vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_APP.USUARIO t1
INNER JOIN PREP_PAGOS.USUARIO t2 ON t1.UIDUSUARIO = t2.UIDUSUARIO
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND
(t1.SNOMBRE <> t2.SNOMBRE OR t1.SAPELLIDOPATERNO <> t2.SAPELLIDOPATERNO 
OR t1.SAPELLIDOMATERNO <> t2.SAPELLIDOMATERNO 
OR t1.UIDMONEDERO <> t2.UIDMONEDERO 
OR t1.STELEFONO <> t2.STELEFONO OR t1.SCORREO <> t2.SCORREO
OR t1.BACTIVO <> t2.BACTIVO OR t1.BBAJA <> t2.BBAJA )

UNION ALL
-- COMISIONES PROVEEDORES
SELECT 
    'COMISIONES PROVEEDORES activos no replicados (CATALOGOS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_CATALOGOS.COMISIONESPROVEEDORES t1
LEFT JOIN PREP_PAGOS.COMISIONESPROVEEDORES t2 ON t1.UIDCOMISIONPROVEEDOR = t2.UIDCOMISIONPROVEEDOR
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDCOMISIONPROVEEDOR IS NULL
UNION ALL
SELECT 
    'COMISIONES PROVEEDORES diferencias (CATALOGOS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_CATALOGOS.COMISIONESPROVEEDORES t1
INNER JOIN PREP_PAGOS.COMISIONESPROVEEDORES t2 ON t1.UIDCOMISIONPROVEEDOR = t2.UIDCOMISIONPROVEEDOR
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND
(t1.SCLAVE <> t2.SCLAVE OR t1.DCOMISIONFIJA <> t2.DCOMISIONFIJA 
OR t1.DCOMISIONPORCENTAJE <> t2.DCOMISIONPORCENTAJE 
OR t1.DIVAFIJO <> t2.DIVAFIJO 
OR t1.DIVAVARIABLE <> t2.DIVAVARIABLE OR t1.BCOBRACOMISIONFIJA <> t2.BCOBRACOMISIONFIJA
OR t1.BCOBRACOMISIONPORCENTAJE <> t2.BCOBRACOMISIONPORCENTAJE
OR t1.BACTIVO <> t2.BACTIVO OR t1.BBAJA <> t2.BBAJA )
UNION ALL

------------------- PAGOS QUERYS

-- ORDEN CREACION
SELECT 
    'ORDENES activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND t2.UIDORDEN IS NULL
UNION ALL
-- Estatus orden
SELECT 
    'ORDENES activos no replicados estatus Orden (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ESTATUSORDEN t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND t2.UIDORDEN IS NULL


UNION ALL
SELECT 
    'ORDENES diferencias BPAGADO (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.ORDENES t1
INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND
(t1.BPAGADO <> t2.BPAGADO)
UNION ALL
SELECT 
    'ORDENES DETALLE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.ORDENESDETALLE t1
LEFT JOIN PREP_PAGOSCONSULTAS.ORDENESDETALLE t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t2.UIDORDEN IS NULL

UNION ALL
-- Claves Banorte
SELECT 
    'CLAVE BANORTE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.CLAVESORDENBANORTE t1
LEFT JOIN PREP_PAGOSCONSULTAS.CLAVESORDENBANORTE t2 ON t1.UIDCLAVESORDENBANORTE = t2.UIDCLAVESORDENBANORTE
WHERE t2.UIDCLAVESORDENBANORTE IS NULL

UNION ALL
-- CoDiSolicitudes
SELECT 
    'CoDi Solicitudes activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.CODISOLICITUD t1
LEFT JOIN PREP_PAGOSCONSULTAS.CODISOLICITUD t2 ON t1.UIDCODISOLICITUD = t2.UIDCODISOLICITUD
WHERE t2.UIDCODISOLICITUD IS NULL

UNION ALL
-- crear estatus orden
SELECT 
    'ESTATUS ORDEN activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ESTATUSORDEN t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t2.UIDORDEN IS NULL

UNION ALL
SELECT 
    'ORDENES diferencias estatus (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.ORDENES t1
INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND
(t1.SESTATUS <> t2.SESTATUS)

UNION ALL
SELECT 
    'ORDENES diferencias SORDEN_REF (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.ORDENES t1
INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND
(t1.SORDEN_REF <> t2.SORDEN_REF)
--Dudas porque el origen solo envia SFOLIO y UIDORDEN

UNION ALL
SELECT 
    'ORDENES diferencias SFOLIO (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.ORDENES t1
INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND (t1.SFOLIO <> t2.SFOLIO)

UNION ALL
-- PagosWebInfoClientes
(SELECT 
    'PAGOSWEBINFOCLIENTES activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSWEBINFOCOMPRADOR t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSWEBINFOCOMPRADOR t2 ON t1.UIDPAGOSWEBINFOCOMPRADOR = t2.UIDPAGOSWEBINFOCOMPRADOR
WHERE t2.UIDPAGOSWEBINFOCOMPRADOR IS NULL
UNION ALL
SELECT 
    'PAGOSWEBINFOCLIENTES diferencias CAMPOS (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.PAGOSWEBINFOCOMPRADOR t1
INNER JOIN PREP_PAGOSCONSULTAS.PAGOSWEBINFOCOMPRADOR t2 ON t1.UIDPAGOSWEBINFOCOMPRADOR = t2.UIDPAGOSWEBINFOCOMPRADOR
WHERE t1.SNOMBRE <> t2.SNOMBRE OR t1.SAPELLIDOPATERNO <> t2.SAPELLIDOPATERNO OR t1.SAPELLIDOMATERNO <> t2.SAPELLIDOMATERNO 
OR t1.SEMAIL <> t2.SEMAIL OR t1.STELEFONO <> t2.STELEFONO
UNION ALL
-- Pagos PayPal
SELECT 
    'PAGOSPAYPAL activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSPAYPAL t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSPAYPAL t2 ON t1.UIDPAGOPAYPAL = t2.UIDPAGOPAYPAL
WHERE t2.UIDPAGOPAYPAL IS NULL
UNION ALL
-- Pagos MercadoPago
SELECT 
    'PAGOSMERCADOPAGO activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSMERCADOPAGO t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSMERCADOPAGO t2 ON t1.UIDPAGOMERCADOPAGO = t2.UIDPAGOMERCADOPAGO
WHERE t2.UIDPAGOMERCADOPAGO IS NULL
UNION ALL
-- Pagos Banorte
SELECT 
    'PAGOSBANORTE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSBANORTE t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSBANORTE t2 ON t1.UIDPAGOBANORTE = t2.UIDPAGOBANORTE
WHERE t2.UIDPAGOBANORTE IS NULL
UNION ALL
-- Pagos CoDi
SELECT 
    'PAGOSCODI activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSCODI t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSCODI t2 ON t1.UIDPAGOCODI = t2.UIDPAGOCODI
WHERE t2.UIDPAGOCODI IS NULL
UNION ALL
-- LOGWEBHOOKS
SELECT 
    'LOGWEBHOOKS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.LOGWEBHOOKS t1
LEFT JOIN PREP_PAGOSCONSULTAS.LOGWEBHOOKS t2 ON t1.UIDLOGWEBHOOK = t2.UIDLOGWEBHOOK
WHERE t2.UIDLOGWEBHOOK IS NULL
UNION ALL
-- TRANSACCIONESWEBHOOKS
SELECT 
    'TRANSACCIONESWEBHOOKS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.TRANSACCIONESWEBHOOKS t1
LEFT JOIN PREP_PAGOSCONSULTAS.TRANSACCIONESWEBHOOKS t2 ON t1.UIDTRANSACCIONWEBHOOK = t2.UIDTRANSACCIONWEBHOOK
WHERE t2.UIDTRANSACCIONWEBHOOK IS NULL)

UNION ALL
-- PARAMETROS
SELECT 
    'PARAMETROS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PARAMETROS t1
LEFT JOIN PREP_PAGOSCONSULTAS.PARAMETROS t2 ON t1.UIDPARAMETRO = t2.UIDPARAMETRO
WHERE t2.UIDPARAMETRO IS NULL
UNION ALL
SELECT 
    'PARAMETROS diferencias campos (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.PARAMETROS t1
INNER JOIN PREP_PAGOSCONSULTAS.PARAMETROS t2 ON t1.UIDPARAMETRO = t2.UIDPARAMETRO
WHERE t1.BACTIVO = 1 AND (t1.SNOMBRE <> t2.SNOMBRE OR t1.SVALOR <> t2.SVALOR)
----


----------------------- DISCREPANCIAS -----------------------

--MONEDEROS
--MonederoCreacion
(SELECT 
    'MONEDEROS no replicados (MONEDEROCOMANDOS vs PAGOSCOMMAND)' AS fuente,
    COUNT(0) AS discrepancias
FROM  PREP_MONEDEROCOMANDOS.MONEDERO t1
LEFT JOIN PREP_PAGOS.ESTADODECUENTA t2 ON t1.UIDMONEDERO = t2.UIDMONEDERO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 
AND t1.UIDTIPOSMONEDERO = '9be96cf8-4ee2-4762-9f77-7c817e851c03' --duda de si se va a usar este filtro
AND t2.UIDMONEDERO IS NULL
UNION ALL 

-- MonederoEstatus
SELECT --t1.UIDESTATUS, t2.UIDESTATUS
   'MONEDEROS diferencia en campo UIDESTATUS (MONEDEROCONSULTAS vs PAGOSCOMMAND)' AS fuente,
    COUNT(0) AS discrepancias
FROM  PREP_MONEDEROCONSULTAS.ESTADODECUENTA t1
INNER JOIN PREP_PAGOS.ESTADODECUENTA t2 ON t1.UIDMONEDERO = t2.UIDMONEDERO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND 
(t1.UIDESTATUS <> t2.UIDESTATUS OR t1.UIDMOTIVO <> t2.UIDMOTIVO OR t1.BACTIVO <> t2.BACTIVO OR t1.BBAJA  <> t2.BBAJA)
UNION ALL 

-- MonederoAbono MonederoDebito
SELECT --t1.DSALDO, t2.DSALDO
    'MONEDEROS diferencia en campo DSALDO (PAGOSCOMMAND vs MONEDEROCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM  PREP_MONEDEROCONSULTAS.ESTADODECUENTA t1
INNER JOIN PREP_PAGOS.ESTADODECUENTA t2 ON t1.UIDMONEDERO = t2.UIDMONEDERO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND (t1.DSALDO <> t2.DSALDO))

-- TARJETAS
--CredencializacionTarjetaVendida
(SELECT --t.UIDTARJETA, e.UIDESTADODECUENTA, e.UIDTARJETA
    'TARJETAS no replicadas (CREDENCIALIZACION vs PAGOSCOMMAND)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_CREDENCIALIZACION.TARJETAS t
LEFT JOIN  PREP_PAGOS.TARJETAS e ON ( e.UIDMONEDERO = t.UIDMONEDERO ) 
WHERE t.BACTIVO = 1 AND t.BBAJA = 0 AND t.BVENDIDA = 1 AND t.BINICIALIZADA = 1 AND t.BASOCIADA = 1 AND e.UIDTARJETA IS NULL 

-- TarjetaEstatus
UNION ALL
SELECT 
    'TARJETAS diferencias de campo UIDESTATUSTARJETA (PAGOSCOMMAND vs CREDENCIALIZACION)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.TARJETAS e 
INNER JOIN PREP_CREDENCIALIZACION.TARJETAS t ON (e.INUMEROTARJETA = t.INUMEROTARJETA) 
WHERE t.BACTIVO = 1 AND t.BBAJA = 0 AND 
(e.UIDESTATUSTARJETA <> t.UIDESTATUSTARJETA OR e.UIDESTATUSTARJETA <> t.UIDESTATUSTARJETA 
OR e.UIDMOTIVO <> t.UIDMOTIVO OR e.BBAJA <> t.BBAJA))

-- MOTIVOS
-- MotivosCreacion
(SELECT 
	'MOTIVOS no replicados (PREP_PAGOS vs PREP_CATALOGOS)' AS fuente,
	 COUNT(0) AS discrepancias
FROM PREP_CATALOGOS.MOTIVOS t1
LEFT JOIN PREP_PAGOS.MOTIVOS t2 ON t1.UIDMOTIVO  = t2.UIDMOTIVO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDMOTIVO  IS NULL
UNION ALL
--Diferencias en campos MotivosActualizacion200
SELECT 
	'MOTIVOS diferencias en campos (PREP_PAGOS vs PREP_CATALOGOS)' AS fuente,
	COUNT(0) AS discrepancias
FROM PREP_CATALOGOS.MOTIVOS t1
INNER JOIN PREP_PAGOS.MOTIVOS t2 ON t1.UIDMOTIVO  = t2.UIDMOTIVO 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 
AND (t1.SMOTIVO <> t2.SMOTIVO 
OR t1.BACTIVO <> t2.BACTIVO 
OR t1.BBAJA <> t2.BBAJA 
OR t1.SDESCRIPCION <> t2.SDESCRIPCION
OR t1.ITIPO <> t2.ITIPO
OR t1.BPERMITIROPERACIONES <> t2.BPERMITIROPERACIONES
OR t1.BPERMITIRREACTIVAR <>  t2.BPERMITIRREACTIVAR
OR t1.BPERMITIREDITAR <> t2.BPERMITIREDITAR
))

-- TIPOS OPERACIONES
-- Diferencias en registros TipoOperacionesComercioCreacion
(SELECT 
	'TIPOOPERACIONES no replicados (PREP_PAGOS vs PREP_CATALOGOS)' AS fuente,
	COUNT(0) AS discrepancias
FROM PREP_CATALOGOS.TIPOOPERACIONES t1
LEFT JOIN PREP_PAGOS.TIPOOPERACIONES t2 ON t1.UIDTIPOOPERACION  = t2.UIDTIPOOPERACION 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDTIPOOPERACION  IS NULL
UNION ALL
--Diferencias en campos TipoOperacionesComercioActualizacion
SELECT 
	'TIPOOPERACIONES diferencias en campos (PREP_PAGOS vs PREP_CATALOGOS)' AS fuente,
	COUNT(0) AS discrepancias
FROM  PREP_CATALOGOS.TIPOOPERACIONES t1
INNER JOIN PREP_PAGOS.TIPOOPERACIONES t2 ON t1.UIDTIPOOPERACION  = t2.UIDTIPOOPERACION 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 
AND (t1.SNOMBRE <> t2.SNOMBRE 
OR t1.SCLAVE <> t2.SCLAVE
OR t1.IMODULO <> t2.IMODULO
))

-- USUARIOS
-- duda porque son muchas discrepancias
(SELECT 
    'USUARIOS activos no replicados (APP vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_APP.USUARIO t1
LEFT JOIN PREP_PAGOS.USUARIO t2 ON t1.UIDUSUARIO = t2.UIDUSUARIO
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDUSUARIO IS NULL
UNION ALL
SELECT 
    'USUARIOS diferencias (APP vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_APP.USUARIO t1
INNER JOIN PREP_PAGOS.USUARIO t2 ON t1.UIDUSUARIO = t2.UIDUSUARIO
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND
(t1.SNOMBRE <> t2.SNOMBRE OR t1.SAPELLIDOPATERNO <> t2.SAPELLIDOPATERNO 
OR t1.SAPELLIDOMATERNO <> t2.SAPELLIDOMATERNO 
OR t1.UIDMONEDERO <> t2.UIDMONEDERO 
OR t1.STELEFONO <> t2.STELEFONO OR t1.SCORREO <> t2.SCORREO
OR t1.BACTIVO <> t2.BACTIVO OR t1.BBAJA <> t2.BBAJA ))

-- COMISIONES PROVEEDORES
(SELECT 
    'COMISIONES PROVEEDORES activos no replicados (CATALOGOS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_CATALOGOS.COMISIONESPROVEEDORES t1
LEFT JOIN PREP_PAGOS.COMISIONESPROVEEDORES t2 ON t1.UIDCOMISIONPROVEEDOR = t2.UIDCOMISIONPROVEEDOR
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDCOMISIONPROVEEDOR IS NULL
UNION ALL
SELECT 
    'COMISIONES PROVEEDORES diferencias (CATALOGOS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_CATALOGOS.COMISIONESPROVEEDORES t1
INNER JOIN PREP_PAGOS.COMISIONESPROVEEDORES t2 ON t1.UIDCOMISIONPROVEEDOR = t2.UIDCOMISIONPROVEEDOR
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND
(t1.SCLAVE <> t2.SCLAVE OR t1.DCOMISIONFIJA <> t2.DCOMISIONFIJA 
OR t1.DCOMISIONPORCENTAJE <> t2.DCOMISIONPORCENTAJE 
OR t1.DIVAFIJO <> t2.DIVAFIJO 
OR t1.DIVAVARIABLE <> t2.DIVAVARIABLE OR t1.BCOBRACOMISIONFIJA <> t2.BCOBRACOMISIONFIJA
OR t1.BCOBRACOMISIONPORCENTAJE <> t2.BCOBRACOMISIONPORCENTAJE
OR t1.BACTIVO <> t2.BACTIVO OR t1.BBAJA <> t2.BBAJA ))

------------------- PAGOS QUERYS

-- ORDEN CREACION
(SELECT 
    'ORDENES activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND t2.UIDORDEN IS NULL
UNION ALL
-- Estatus orden
SELECT 
    'ORDENES activos no replicados estatus Orden (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ESTATUSORDEN t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND t2.UIDORDEN IS NULL


UNION ALL
SELECT 
    'ORDENES diferencias BPAGADO (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.ORDENES t1
INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND
(t1.BPAGADO <> t2.BPAGADO)
UNION ALL
SELECT 
    'ORDENES DETALLE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.ORDENESDETALLE t1
LEFT JOIN PREP_PAGOSCONSULTAS.ORDENESDETALLE t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t2.UIDORDEN IS NULL)

-- Claves Banorte
SELECT 
    'CLAVE BANORTE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.CLAVESORDENBANORTE t1
LEFT JOIN PREP_PAGOSCONSULTAS.CLAVESORDENBANORTE t2 ON t1.UIDCLAVESORDENBANORTE = t2.UIDCLAVESORDENBANORTE
WHERE t2.UIDCLAVESORDENBANORTE IS NULL

-- CoDiSolicitudes
SELECT 
    'CoDi Solicitudes activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.CODISOLICITUD t1
LEFT JOIN PREP_PAGOSCONSULTAS.CODISOLICITUD t2 ON t1.UIDCODISOLICITUD = t2.UIDCODISOLICITUD
WHERE t2.UIDCODISOLICITUD IS NULL

-- crear estatus orden
SELECT 
    'ESTATUS ORDEN activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ESTATUSORDEN t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t2.UIDORDEN IS NULL
SELECT 
    'ORDENES diferencias estatus (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.ORDENES t1
INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND
(t1.SESTATUS <> t2.SESTATUS)
SELECT 
    'ORDENES diferencias SORDEN_REF (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.ORDENES t1
INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND
(t1.SORDEN_REF <> t2.SORDEN_REF)
--Dudas porque el origen solo envia SFOLIO y UIDORDEN
SELECT 
    'ORDENES diferencias SFOLIO (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.ORDENES t1
INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND (t1.SFOLIO <> t2.SFOLIO)

-- PagosWebInfoClientes
(SELECT 
    'PAGOSWEBINFOCLIENTES activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSWEBINFOCOMPRADOR t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSWEBINFOCOMPRADOR t2 ON t1.UIDPAGOSWEBINFOCOMPRADOR = t2.UIDPAGOSWEBINFOCOMPRADOR
WHERE t2.UIDPAGOSWEBINFOCOMPRADOR IS NULL
UNION ALL
SELECT 
    'PAGOSWEBINFOCLIENTES diferencias CAMPOS (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.PAGOSWEBINFOCOMPRADOR t1
INNER JOIN PREP_PAGOSCONSULTAS.PAGOSWEBINFOCOMPRADOR t2 ON t1.UIDPAGOSWEBINFOCOMPRADOR = t2.UIDPAGOSWEBINFOCOMPRADOR
WHERE t1.SNOMBRE <> t2.SNOMBRE OR t1.SAPELLIDOPATERNO <> t2.SAPELLIDOPATERNO OR t1.SAPELLIDOMATERNO <> t2.SAPELLIDOMATERNO 
OR t1.SEMAIL <> t2.SEMAIL OR t1.STELEFONO <> t2.STELEFONO
UNION ALL
-- Pagos PayPal
SELECT 
    'PAGOSPAYPAL activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSPAYPAL t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSPAYPAL t2 ON t1.UIDPAGOPAYPAL = t2.UIDPAGOPAYPAL
WHERE t2.UIDPAGOPAYPAL IS NULL
UNION ALL
-- Pagos MercadoPago
SELECT 
    'PAGOSMERCADOPAGO activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSMERCADOPAGO t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSMERCADOPAGO t2 ON t1.UIDPAGOMERCADOPAGO = t2.UIDPAGOMERCADOPAGO
WHERE t2.UIDPAGOMERCADOPAGO IS NULL
UNION ALL
-- Pagos Banorte
SELECT 
    'PAGOSBANORTE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSBANORTE t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSBANORTE t2 ON t1.UIDPAGOBANORTE = t2.UIDPAGOBANORTE
WHERE t2.UIDPAGOBANORTE IS NULL
UNION ALL
-- Pagos CoDi
SELECT 
    'PAGOSCODI activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PAGOSCODI t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSCODI t2 ON t1.UIDPAGOCODI = t2.UIDPAGOCODI
WHERE t2.UIDPAGOCODI IS NULL
UNION ALL
-- LOGWEBHOOKS
SELECT 
    'LOGWEBHOOKS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.LOGWEBHOOKS t1
LEFT JOIN PREP_PAGOSCONSULTAS.LOGWEBHOOKS t2 ON t1.UIDLOGWEBHOOK = t2.UIDLOGWEBHOOK
WHERE t2.UIDLOGWEBHOOK IS NULL
UNION ALL
-- TRANSACCIONESWEBHOOKS
SELECT 
    'TRANSACCIONESWEBHOOKS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.TRANSACCIONESWEBHOOKS t1
LEFT JOIN PREP_PAGOSCONSULTAS.TRANSACCIONESWEBHOOKS t2 ON t1.UIDTRANSACCIONWEBHOOK = t2.UIDTRANSACCIONWEBHOOK
WHERE t2.UIDTRANSACCIONWEBHOOK IS NULL)

-- PARAMETROS
SELECT 
    'PARAMETROS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)' AS fuente,
    COUNT(0) AS discrepancias
FROM PREP_PAGOS.PARAMETROS t1
LEFT JOIN PREP_PAGOSCONSULTAS.PARAMETROS t2 ON t1.UIDPARAMETRO = t2.UIDPARAMETRO
WHERE t2.UIDPARAMETRO IS NULL
UNION ALL
SELECT 
    'PARAMETROS diferencias campos (PREP_PAGOSCONSULTAS vs PREP_PAGOS)' AS fuente,
    COUNT(0) AS discrepancias
    FROM PREP_PAGOS.PARAMETROS t1
INNER JOIN PREP_PAGOSCONSULTAS.PARAMETROS t2 ON t1.UIDPARAMETRO = t2.UIDPARAMETRO
WHERE t1.BACTIVO = 1 AND (t1.SNOMBRE <> t2.SNOMBRE OR t1.SVALOR <> t2.SVALOR)


--UPDATES / INSERTS

-- PAGOSCOMMAND
-- TARJETAS

--CredencializacionTarjetaVendida
INSERT INTO PREP_PAGOS.TARJETAS (
  UIDTARJETA,
  INUMEROMONEDERO,
  INUMEROTARJETA,
  SVIGENCIA,
  UIDESTATUSTARJETA,
  BVENDIDA,
  BASOCIADA,
  UIDTIPOTARIFA,
  BACTIVO,
  BBAJA,
  UIDMONEDERO,
  SFOLIO,
  UIDMOTIVO,
  UIDUSUARIOTARJETA
)
SELECT
  t1.UIDTARJETA,
  t1.INUMEROMONEDERO,
  t1.INUMEROTARJETA,
  t1.SVIGENCIA,
  t1.UIDESTATUSTARJETA,
  t1.BVENDIDA,
  t1.BASOCIADA,
  t1.UIDTIPOTARIFA,
  t1.BACTIVO,
  t1.BBAJA,
  t1.UIDMONEDERO,
  t1.SFOLIO,
  t1.UIDMOTIVO,
  t1.UIDUSUARIOTARJETA
FROM PREP_CREDENCIALIZACION.TARJETAS t1
LEFT JOIN PREP_PAGOS.TARJETAS t2 ON ( t1.UIDMONEDERO = t2.UIDMONEDERO ) 
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t1.BVENDIDA = 1 AND t1.BINICIALIZADA = 1 AND t1.BASOCIADA = 1 AND t2.UIDTARJETA IS NULL 
--TarjetaEstatus  
MERGE INTO PREP_PAGOS.TARJETAS e
USING (
    SELECT
        t.INUMEROTARJETA,
        t.UIDESTATUSTARJETA,
        t.UIDMOTIVO,
        t.BBAJA
    FROM PREP_CREDENCIALIZACION.TARJETAS t
    WHERE t.BACTIVO = 1 AND t.BBAJA = 0
) t
ON (e.INUMEROTARJETA = t.INUMEROTARJETA)
WHEN MATCHED THEN
    UPDATE SET
        e.UIDESTATUSTARJETA = t.UIDESTATUSTARJETA,
        e.UIDMOTIVO = t.UIDMOTIVO,
        e.BBAJA = t.BBAJA
    WHERE 
        NVL(e.UIDESTATUSTARJETA, 'NULL') <> NVL(t.UIDESTATUSTARJETA, 'NULL') OR
        NVL(e.UIDMOTIVO, 'NULL') <> NVL(t.UIDMOTIVO, 'NULL') OR
        NVL(e.BBAJA, 0) <> NVL(t.BBAJA, 0);

-- MONEDEROS


--todo TENGO ESTE PENDIENTENOMAS
--MonederoCreacion
-- 'MONEDEROS no replicados (MONEDEROCOMANDOS vs APPMONEDEROCOMMAND)'
INSERT INTO PREP_PAGOS.ESTADODECUENTA (
  UIDESTADODECUENTA,
  UIDMONEDERO,
  UIDESTATUS,
  INUMMONEDERO,
  DSALDO,
  BACTIVO,
  BBAJA,
  UIDMOTIVO
)
SELECT
  PMC.UIDESTADODECUENTA,
  SRC.UIDMONEDERO,
  PMC.UIDESTATUS,
  SRC.INUMMONEDERO,
  PMC.DSALDO,
  SRC.BACTIVO,
  SRC.BBAJA,
  PMC.UIDMOTIVO
FROM PREP_MONEDEROCOMANDOS.MONEDERO SRC
LEFT JOIN PREP_PAGOS.ESTADODECUENTA TGT ON SRC.UIDMONEDERO = TGT.UIDMONEDERO
INNER JOIN PREP_MONEDEROCONSULTAS.ESTADODECUENTA PMC ON PMC.UIDMONEDERO = SRC.UIDMONEDERO
WHERE  SRC.BACTIVO = 1 
  AND SRC.BBAJA = 0 
  AND SRC.UIDTIPOSMONEDERO = '9be96cf8-4ee2-4762-9f77-7c817e851c03' -- DUDA
  AND TGT.UIDMONEDERO IS NULL;

-- MonederoEstatus
MERGE INTO PREP_PAGOS.ESTADODECUENTA t2
USING (
    SELECT 
        t1.UIDMONEDERO,
        t1.UIDESTATUS,
        t1.UIDMOTIVO,
        t1.BACTIVO,
        t1.BBAJA
    FROM PREP_MONEDEROCONSULTAS.ESTADODECUENTA t1
    WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0
) t1
ON (t1.UIDMONEDERO = t2.UIDMONEDERO)
WHEN MATCHED THEN
    UPDATE SET
        t2.UIDESTATUS = t1.UIDESTATUS,
        t2.UIDMOTIVO = t1.UIDMOTIVO,
        t2.BACTIVO = t1.BACTIVO,
        t2.BBAJA = t1.BBAJA
    WHERE 
        NVL(t2.UIDESTATUS, 'NULL') <> NVL(t1.UIDESTATUS, 'NULL') OR
        NVL(t2.UIDMOTIVO, 'NULL') <> NVL(t1.UIDMOTIVO, 'NULL') OR
        NVL(t2.BACTIVO, 0) <> NVL(t1.BACTIVO, 0) OR
        NVL(t2.BBAJA, 0) <> NVL(t1.BBAJA, 0);

-- MonederoAbono MonederoDebito--todo este se debe hacer en la nochecita
MERGE INTO PREP_PAGOS.ESTADODECUENTA t2
USING (
    SELECT 
        t1.UIDMONEDERO,
        t1.DSALDO
    FROM PREP_MONEDEROCONSULTAS.ESTADODECUENTA t1
    WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0
) t1
ON (t1.UIDMONEDERO = t2.UIDMONEDERO)
WHEN MATCHED THEN
    UPDATE SET
        t2.DSALDO = t1.DSALDO
    WHERE 
        NVL(t2.DSALDO, 0) <> NVL(t1.DSALDO, 0);

-- MOTIVOS
-- MotivosCreacion
INSERT INTO PREP_PAGOS.MOTIVOS (
    UIDMOTIVO,
    SMOTIVO,
    SDESCRIPCION,
    ITIPO,
    BPERMITIROPERACIONES,
    BPERMITIRREACTIVAR,
    BPERMITIREDITAR,
    BACTIVO,
    BBAJA
)
SELECT 
    t1.UIDMOTIVO,
    t1.SMOTIVO,
    t1.SDESCRIPCION,
    t1.ITIPO,
    t1.BPERMITIROPERACIONES,
    t1.BPERMITIRREACTIVAR,
    t1.BPERMITIREDITAR,
    t1.BACTIVO,
    t1.BBAJA
FROM PREP_CATALOGOS.MOTIVOS t1
LEFT JOIN PREP_PAGOS.MOTIVOS t2 ON t1.UIDMOTIVO = t2.UIDMOTIVO
WHERE t1.BACTIVO = 1
  AND t1.BBAJA = 0
  AND t2.UIDMOTIVO IS NULL;

--Actualización en campos MotivosActualizacion
MERGE INTO PREP_PAGOS.MOTIVOS REPLICA
USING (
    SELECT 
        t1.UIDMOTIVO,
        t1.SMOTIVO,
        t1.BACTIVO,
        t1.BBAJA,
        t1.SDESCRIPCION,
        t1.ITIPO,
        t1.BPERMITIROPERACIONES,
        t1.BPERMITIRREACTIVAR,
        t1.BPERMITIREDITAR
    FROM PREP_CATALOGOS.MOTIVOS t1
    INNER JOIN PREP_PAGOS.MOTIVOS t2 ON t1.UIDMOTIVO = t2.UIDMOTIVO
    WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0
      AND (
        t1.SMOTIVO <> t2.SMOTIVO OR
        t1.BACTIVO <> t2.BACTIVO OR
        t1.BBAJA <> t2.BBAJA OR
        t1.SDESCRIPCION <> t2.SDESCRIPCION OR
        t1.ITIPO <> t2.ITIPO OR
        t1.BPERMITIROPERACIONES <> t2.BPERMITIROPERACIONES OR
        t1.BPERMITIRREACTIVAR <> t2.BPERMITIRREACTIVAR OR
        t1.BPERMITIREDITAR <> t2.BPERMITIREDITAR
      )
) ORIGEN
ON (REPLICA.UIDMOTIVO = ORIGEN.UIDMOTIVO)
WHEN MATCHED THEN
UPDATE SET
    REPLICA.SMOTIVO = ORIGEN.SMOTIVO,
    REPLICA.BACTIVO = ORIGEN.BACTIVO,
    REPLICA.BBAJA = ORIGEN.BBAJA,
    REPLICA.SDESCRIPCION = ORIGEN.SDESCRIPCION,
    REPLICA.ITIPO = ORIGEN.ITIPO,
    REPLICA.BPERMITIROPERACIONES = ORIGEN.BPERMITIROPERACIONES,
    REPLICA.BPERMITIRREACTIVAR = ORIGEN.BPERMITIRREACTIVAR,
    REPLICA.BPERMITIREDITAR = ORIGEN.BPERMITIREDITAR;

-- TIPOS OPERACIONES

-- Inserción en registros TipoOperacionesComercioCreacion
INSERT INTO PREP_PAGOS.TIPOOPERACIONES (
  UIDTIPOOPERACION,
  SNOMBRE,
  SCLAVE,
  IMODULO,
  BACTIVO,
  BBAJA
)
SELECT 
  t1.UIDTIPOOPERACION,
  t1.SNOMBRE,
  t1.SCLAVE,
  t1.IMODULO,
  t1.BACTIVO,
  t1.BBAJA
FROM PREP_CATALOGOS.TIPOOPERACIONES t1
LEFT JOIN PREP_PAGOS.TIPOOPERACIONES t2 
  ON t1.UIDTIPOOPERACION = t2.UIDTIPOOPERACION
WHERE t1.BACTIVO = 1
  AND t1.BBAJA = 0
  AND t2.UIDTIPOOPERACION IS NULL;

-- Actualización en campos TipoOperacionesComercioActualizacion
MERGE INTO PREP_PAGOS.TIPOOPERACIONES REPLICA
USING (
  SELECT 
    t1.UIDTIPOOPERACION,
    t1.SNOMBRE,
    t1.SCLAVE,
    t1.IMODULO
  FROM PREP_CATALOGOS.TIPOOPERACIONES t1
  INNER JOIN PREP_PAGOS.TIPOOPERACIONES t2 ON t1.UIDTIPOOPERACION = t2.UIDTIPOOPERACION
  WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0
    AND (
      t1.SNOMBRE <> t2.SNOMBRE OR
      t1.SCLAVE <> t2.SCLAVE OR
      t1.IMODULO <> t2.IMODULO
    )
) ORIGEN
ON (REPLICA.UIDTIPOOPERACION = ORIGEN.UIDTIPOOPERACION)
WHEN MATCHED THEN
UPDATE SET
  REPLICA.SNOMBRE = ORIGEN.SNOMBRE,
  REPLICA.SCLAVE = ORIGEN.SCLAVE,
  REPLICA.IMODULO = ORIGEN.IMODULO;

-- USUARIOS

-- 'USUARIOS activos no replicados (APP vs PREP_PAGOS)'
INSERT INTO PREP_PAGOS.USUARIO (
	SNOMBRE,
	SAPELLIDOPATERNO,
    SAPELLIDOMATERNO,
    STELEFONO,
    SCORREO,
    BACTIVO,
    BBAJA,
    UIDUSUARIO,
    UIDMONEDERO,
    IESTATUSCUENTA
)
SELECT
	t1.SNOMBRE,
	t1.SAPELLIDOPATERNO,
    t1.SAPELLIDOMATERNO,
    t1.STELEFONO,
    t1.SCORREO,
    t1.BACTIVO,
    t1.BBAJA,
    t1.UIDUSUARIO,
    t1.UIDMONEDERO,
    t1.IESTATUSCUENTA
FROM PREP_APP.USUARIO t1
LEFT JOIN PREP_PAGOS.USUARIO t2
       ON t1.UIDUSUARIO = t2.UIDUSUARIO
WHERE t1.BACTIVO = 1
  AND t1.BBAJA = 0
  AND t2.UIDUSUARIO IS NULL;

-- 'USUARIOS diferencias en SIDAPLICACION (APP vs PREP_PAGOS)'
MERGE INTO PREP_PAGOS.USUARIO t2
USING (
    SELECT 
        t1.UIDUSUARIO,
        t1.SNOMBRE,
        t1.SAPELLIDOPATERNO,
        t1.SAPELLIDOMATERNO,
        t1.UIDMONEDERO,
        t1.STELEFONO,
        t1.SCORREO,
        t1.BACTIVO,
        t1.BBAJA
    FROM PREP_APP.USUARIO t1
    INNER JOIN PREP_PAGOS.USUARIO t2 ON t1.UIDUSUARIO = t2.UIDUSUARIO
    WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND (
        t1.SNOMBRE            <> t2.SNOMBRE OR
        t1.SAPELLIDOPATERNO   <> t2.SAPELLIDOPATERNO OR
        t1.SAPELLIDOMATERNO   <> t2.SAPELLIDOMATERNO OR
        t1.UIDMONEDERO        <> t2.UIDMONEDERO OR
        t1.STELEFONO          <> t2.STELEFONO OR
        t1.SCORREO            <> t2.SCORREO OR
        t1.BACTIVO            <> t2.BACTIVO OR
        t1.BBAJA              <> t2.BBAJA
    )
) t1_actualizado
ON (t2.UIDUSUARIO = t1_actualizado.UIDUSUARIO)
WHEN MATCHED THEN UPDATE SET
    t2.SNOMBRE           = t1_actualizado.SNOMBRE,
    t2.SAPELLIDOPATERNO  = t1_actualizado.SAPELLIDOPATERNO,
    t2.SAPELLIDOMATERNO  = t1_actualizado.SAPELLIDOMATERNO,
    t2.UIDMONEDERO       = t1_actualizado.UIDMONEDERO,
    t2.STELEFONO         = t1_actualizado.STELEFONO,
    t2.SCORREO           = t1_actualizado.SCORREO,
    t2.BACTIVO           = t1_actualizado.BACTIVO,
    t2.BBAJA             = t1_actualizado.BBAJA;

-- COMISIONES PROVEEDORES
 
-- COMISIONES PROVEEDORES activos no replicados (CATALOGOS vs PREP_PAGOS)
INSERT INTO PREP_PAGOS.COMISIONESPROVEEDORES (
    UIDCOMISIONPROVEEDOR,
    SCLAVE,
    DCOMISIONFIJA,
    DCOMISIONPORCENTAJE,
    DIVAFIJO,
    BACTIVO,
    BBAJA,
    DIVAVARIABLE,
    BCOBRACOMISIONFIJA,
    BCOBRACOMISIONPORCENTAJE,
    DTFECHACREACION,
    DTFECHAULTMOD,
    UIDUSUARIOCREACION,
    UIDUSUARIOULTMOD,
    SFORMULA
)
SELECT 
    t1.UIDCOMISIONPROVEEDOR,
    t1.SCLAVE,
    t1.DCOMISIONFIJA,
    t1.DCOMISIONPORCENTAJE,
    t1.DIVAFIJO,
    t1.BACTIVO,
    t1.BBAJA,
    t1.DIVAVARIABLE,
    t1.BCOBRACOMISIONFIJA,
    t1.BCOBRACOMISIONPORCENTAJE,
    t1.DTFECHACREACION,
    t1.DTFECHAULTMOD,
    t1.UIDUSUARIOCREACION,
    t1.UIDUSUARIOULTMOD,
    t1.SFORMULA
FROM PREP_CATALOGOS.COMISIONESPROVEEDORES t1
LEFT JOIN PREP_PAGOS.COMISIONESPROVEEDORES t2 
    ON t1.UIDCOMISIONPROVEEDOR = t2.UIDCOMISIONPROVEEDOR
WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND t2.UIDCOMISIONPROVEEDOR IS NULL;

-- COMISIONES PROVEEDORES diferencias (CATALOGOS vs PREP_PAGOS)
MERGE INTO PREP_PAGOS.COMISIONESPROVEEDORES t2
USING (
    SELECT 
        t1.UIDCOMISIONPROVEEDOR,
        t1.SCLAVE,
        t1.DCOMISIONFIJA,
        t1.DCOMISIONPORCENTAJE,
        t1.DIVAFIJO,
        t1.DIVAVARIABLE,
        t1.BCOBRACOMISIONFIJA,
        t1.BCOBRACOMISIONPORCENTAJE,
        t1.BACTIVO,
        t1.BBAJA
    FROM PREP_CATALOGOS.COMISIONESPROVEEDORES t1
    INNER JOIN PREP_PAGOS.COMISIONESPROVEEDORES t2 
        ON t1.UIDCOMISIONPROVEEDOR = t2.UIDCOMISIONPROVEEDOR
    WHERE t1.BACTIVO = 1 AND t1.BBAJA = 0 AND (
        t1.SCLAVE <> t2.SCLAVE OR
        t1.DCOMISIONFIJA <> t2.DCOMISIONFIJA OR
        t1.DCOMISIONPORCENTAJE <> t2.DCOMISIONPORCENTAJE OR
        t1.DIVAFIJO <> t2.DIVAFIJO OR
        t1.DIVAVARIABLE <> t2.DIVAVARIABLE OR
        t1.BCOBRACOMISIONFIJA <> t2.BCOBRACOMISIONFIJA OR
        t1.BCOBRACOMISIONPORCENTAJE <> t2.BCOBRACOMISIONPORCENTAJE OR
        t1.BACTIVO <> t2.BACTIVO OR
        t1.BBAJA <> t2.BBAJA
    )
) t1_actualizado
ON (t2.UIDCOMISIONPROVEEDOR = t1_actualizado.UIDCOMISIONPROVEEDOR)
WHEN MATCHED THEN UPDATE SET
    t2.SCLAVE                   = t1_actualizado.SCLAVE,
    t2.DCOMISIONFIJA            = t1_actualizado.DCOMISIONFIJA,
    t2.DCOMISIONPORCENTAJE      = t1_actualizado.DCOMISIONPORCENTAJE,
    t2.DIVAFIJO                 = t1_actualizado.DIVAFIJO,
    t2.DIVAVARIABLE             = t1_actualizado.DIVAVARIABLE,
    t2.BCOBRACOMISIONFIJA       = t1_actualizado.BCOBRACOMISIONFIJA,
    t2.BCOBRACOMISIONPORCENTAJE = t1_actualizado.BCOBRACOMISIONPORCENTAJE,
    t2.BACTIVO                  = t1_actualizado.BACTIVO,
    t2.BBAJA                    = t1_actualizado.BBAJA;



----- PAGOS QUERYS

-- ORDENES activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.ORDENES (
    UIDORDEN,
    SORDEN_REF,
    DMONTO,
    SCONCEPTO,
    DTFECHA,
    IOPCION_PAGO,
    BACTIVO,
    BPAGADO,
    UIDUSUARIO,
    UIDPAQUETE,
    UIDMONEDERO,
	SEMAILUSUARIO,
	SESTATUS,
	SFOLIO,
	SNUMMONEDERO,
	SNUMTARJETA,
	DTFECHAOPERACION,
	IORIGEN
)
SELECT 
	t1.UIDORDEN,
    t1.SORDEN_REF,
    t1.DMONTO,
    t1.SCONCEPTO,
    t1.DTFECHA,
    t1.IOPCION_PAGO,
    t1.BACTIVO,
    t1.BPAGADO,
    t1.UIDUSUARIO,
    t1.UIDPAQUETE,
    t1.UIDMONEDERO,
	t1.SEMAILUSUARIO,
	t1.SESTATUS,
	t1.SFOLIO,
	t1.SNUMMONEDERO,-- ligarla a tarjeta(?)
	t1.SNUMTARJETA,--
	t1.DTFECHAOPERACION,
	t1.IORIGEN
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ORDENES t2 
    ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND t2.UIDORDEN IS NULL;
--------------------------SEBAS
--todo aqui ando    
INSERT INTO PREP_PAGOSCONSULTAS.ORDENES (
    UIDORDEN,
    SORDEN_REF,
    DMONTO,
    SCONCEPTO,
    DTFECHA,
    IOPCION_PAGO,
    BACTIVO,
    BPAGADO,
    UIDUSUARIO,
    UIDPAQUETE,
    UIDMONEDERO,
	SEMAILUSUARIO,
	SESTATUS,
	SFOLIO,
	SNUMMONEDERO,
	SNUMTARJETA,
	DTFECHAOPERACION,
	IORIGEN
)
SELECT 
	t1.UIDORDEN,
    t1.SORDEN_REF,
    t1.DMONTO,
    t1.SCONCEPTO,
    t1.DTFECHA,
    t1.IOPCION_PAGO,
    t1.BACTIVO,
    t1.BPAGADO,
    t1.UIDUSUARIO,
    t1.UIDPAQUETE,
    t1.UIDMONEDERO,
	t1.SEMAILUSUARIO,
	t1.SESTATUS,
	t1.SFOLIO,
	t3.INUMEROMONEDERO,-- ligarla a tarjeta(?)
	t3.INUMEROTARJETA,--
	t1.DTFECHAOPERACION,
	t1.IORIGEN
FROM   PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ORDENES t2 
    ON t1.UIDORDEN = t2.UIDORDEN
LEFT JOIN PREP_CREDENCIALIZACION.TARJETAS T3 ON t3.UIDMONEDERO = T1.UIDMONEDERO
WHERE t1.BACTIVO = 1 AND t2.UIDORDEN IS NULL;
-----------------
-- ORDENES activos no replicados estatus Orden (PREP_PAGOS vs PREP_PAGOSCONSULTASSSSSSSSS

INSERT INTO PREP_PAGOSCONSULTAS.ESTATUSORDEN (
    UIDESTATUSORDEN,
    UIDORDEN,
    SESTATUS, -- se actualiza en el servicio
    DTFECHA, -- se actualiza en el servicio
    IORDEN -- se actualiza en el servicio
)
SELECT 
	t1.UIDESTATUSORDEN,
    t1.UIDORDEN,
    'CREADA',
    DateTime.Now, --cambiar
    1
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ESTATUSORDEN t2 
    ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND t2.UIDORDEN IS NULL;
------------------SEBAS
---TODO EJECUTAR ESTE
INSERT INTO  PREP_PAGOSCONSULTAS.ESTATUSORDEN (
    UIDESTATUSORDEN,
    UIDORDEN,
    SESTATUS, -- se actualiza en el servicio
    DTFECHA, -- se actualiza en el servicio
    IORDEN -- se actualiza en el servicio
)
SELECT 
LOWER(SUBSTR 
(RAWTOHEX (SYS_GUID ()), 1, 8) || '-' || 
SUBSTR (RAWTOHEX (SYS_GUID ()), 9, 4) || '-' || 
SUBSTR (RAWTOHEX (SYS_GUID ()), 13, 4) || '-' || 
SUBSTR (RAWTOHEX (SYS_GUID ()), 17, 4) || '-' || 
SUBSTR (RAWTOHEX (SYS_GUID ()), 21)),
    t1.UIDORDEN,
    'CREADA',
    T1.DTFECHA, --cambiar
    1
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ESTATUSORDEN t2 
    ON t1.UIDORDEN = t2.UIDORDEN
WHERE t1.BACTIVO = 1 AND t2.UIDORDEN IS NULL;

-----
--todo ejecutar este
-- ORDENES diferencias BPAGADO (PREP_PAGOSCONSULTAS vs PREP_PAGOS)
MERGE INTO PREP_PAGOSCONSULTAS.ORDENES t2
USING (
    SELECT 
        t1.UIDORDEN,
        t1.BPAGADO
    FROM PREP_PAGOS.ORDENES t1
    INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 
        ON t1.UIDORDEN = t2.UIDORDEN
    WHERE t1.BACTIVO = 1
      AND t1.BPAGADO <> t2.BPAGADO
) t1_actualizado
ON (t2.UIDORDEN = t1_actualizado.UIDORDEN)
WHEN MATCHED THEN UPDATE SET
    t2.BPAGADO = t1_actualizado.BPAGADO;

-- ORDENES DETALLE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.ORDENESDETALLE (
    UIDORDENDETALLE,
    UIDORDEN,
	SCONCEPTO,
	DMONTO,
	BCOMISION,
	IORDEN,
	DTFECHA
)
SELECT 
    t1.UIDORDENDETALLE,
    t1.UIDORDEN,
	t1.SCONCEPTO,
	t1.DMONTO,
	t1.BCOMISION,
	t1.IORDEN,
	t1.DTFECHA
FROM PREP_PAGOS.ORDENESDETALLE t1
LEFT JOIN PREP_PAGOSCONSULTAS.ORDENESDETALLE t2 
    ON t1.UIDORDENDETALLE = t2.UIDORDENDETALLE
WHERE t2.UIDORDENDETALLE IS NULL;

-- CLAVE BANORTE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.CLAVESORDENBANORTE (
    UIDCLAVESORDENBANORTE,
    UIDORDEN,
    SVI,
	SSALT,
	SPASSSPHRASE,
	SDATAENCRIPTED
)
SELECT 
    t1.UIDCLAVESORDENBANORTE,
    t1.UIDORDEN,
    t1.SVI,
	t1.SSALT,
	t1.SPASSSPHRASE,
	t1.SDATAENCRIPTED
FROM PREP_PAGOS.CLAVESORDENBANORTE t1
LEFT JOIN PREP_PAGOSCONSULTAS.CLAVESORDENBANORTE t2 
    ON t1.UIDCLAVESORDENBANORTE = t2.UIDCLAVESORDENBANORTE
WHERE t2.UIDCLAVESORDENBANORTE IS NULL;

-- CoDi Solicitudes activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.CODISOLICITUD (
    UIDCODISOLICITUD,
    UIDORDEN,
    ICODIGO_RETURNCODE,
    SCODIGO_APPLICATION,
    SCODIGO_DESCRIPTION,
    IRESP_TYP,
    SRESP_INFOVENDEDOR_DEV,
    SRESP_INFOCOBRO_IDC,
    IRESP_INFOCOBRO_SER,
    SRESP_INFOCOBRO_ENC,
    SRESP_CRY,
    SIMG_IMAGERESPONSE,
    SIMG_REF,
    DTVIGENCIA,
    DTFECHACREACION
)
SELECT 
    t1.UIDCODISOLICITUD,
    t1.UIDORDEN,
    t1.ICODIGO_RETURNCODE,
    t1.SCODIGO_APPLICATION,
    t1.SCODIGO_DESCRIPTION,
    t1.IRESP_TYP,
    t1.SRESP_INFOVENDEDOR_DEV,
    t1.SRESP_INFOCOBRO_IDC,
    t1.IRESP_INFOCOBRO_SER,
    t1.SRESP_INFOCOBRO_ENC,
    t1.SRESP_CRY,
    t1.SIMG_IMAGERESPONSE,
    t1.SIMG_REF,
    t1.DTVIGENCIA,
    t1.DTFECHACREACION
FROM PREP_PAGOS.CODISOLICITUD t1
LEFT JOIN PREP_PAGOSCONSULTAS.CODISOLICITUD t2 
    ON t1.UIDCODISOLICITUD = t2.UIDCODISOLICITUD
WHERE t2.UIDCODISOLICITUD IS NULL;

-- ESTATUS ORDEN activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
-- DUDAS En replica de estatus porque no tengo como saber de que servicio viene y no sabría que estatus agregar
INSERT INTO PREP_PAGOSCONSULTAS.ESTATUSORDEN (
    UIDESTATUSORDEN,
    UIDORDEN,
    SESTATUS,
    DTFECHA,
    IORDEN,
    SFOLIO
)
SELECT
	t1.UIDESTATUSORDEN,
    t1.UIDORDEN,
    t1.SESTATUS,
    t1.DTFECHA,
    t1.IORDEN,
    t1.SFOLIO
FROM PREP_PAGOS.ORDENES t1
LEFT JOIN PREP_PAGOSCONSULTAS.ESTATUSORDEN t2 
    ON t1.UIDORDEN = t2.UIDORDEN
WHERE t2.UIDORDEN IS NULL;
------------SEBAS --todo revisar bien esta seccion de aca
INSERT INTO PREP_PAGOSCONSULTAS.ESTATUSORDEN (
    UIDESTATUSORDEN,
    UIDORDEN,
    SESTATUS,
    DTFECHA,
    IORDEN,
    SFOLIO
)
SELECT
	t2.UIDESTATUSORDEN,
    t1.UIDORDEN,
    t1.SESTATUS,
    t1.DTFECHA,
    t2.IORDEN,
    t2.SFOLIO
FROM  PREP_PAGOS.ORDENES t1
LEFT JOIN    PREP_PAGOSCONSULTAS.ESTATUSORDEN t2 
    ON t1.UIDORDEN = t2.UIDORDEN
WHERE t2.UIDORDEN IS NULL;
-----
-- Va de la mano con el anterior script
-- ORDENES diferencias estatus (PREP_PAGOSCONSULTAS vs PREP_PAGOS)
MERGE INTO PREP_PAGOSCONSULTAS.ORDENES t2
USING (
    SELECT 
        t1.UIDORDEN,
        t1.SESTATUS
    FROM PREP_PAGOS.ORDENES t1
    INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 
        ON t1.UIDORDEN = t2.UIDORDEN
    WHERE t1.BACTIVO = 1
      AND t1.SESTATUS <> t2.SESTATUS
) t1_actualizado
ON (t2.UIDORDEN = t1_actualizado.UIDORDEN)
WHEN MATCHED THEN UPDATE SET
    t2.SESTATUS = t1_actualizado.SESTATUS;

-- ORDENES diferencias SORDEN_REF (PREP_PAGOSCONSULTAS vs PREP_PAGOS)
MERGE INTO PREP_PAGOSCONSULTAS.ORDENES t2
USING (
    SELECT 
        t1.UIDORDEN,
        t1.SORDEN_REF
    FROM PREP_PAGOS.ORDENES t1
    INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 
        ON t1.UIDORDEN = t2.UIDORDEN
    WHERE t1.BACTIVO = 1
      AND t1.SORDEN_REF <> t2.SORDEN_REF
) t1_actualizado
ON (t2.UIDORDEN = t1_actualizado.UIDORDEN)
WHEN MATCHED THEN UPDATE SET
    t2.SORDEN_REF = t1_actualizado.SORDEN_REF;

-- ORDENES diferencias SFOLIO (PREP_PAGOSCONSULTAS vs PREP_PAGOS)
MERGE INTO PREP_PAGOSCONSULTAS.ORDENES t2
USING (
    SELECT 
        t1.UIDORDEN,
        t1.SFOLIO
    FROM PREP_PAGOS.ORDENES t1
    INNER JOIN PREP_PAGOSCONSULTAS.ORDENES t2 
        ON t1.UIDORDEN = t2.UIDORDEN
    WHERE t1.BACTIVO = 1
      AND t1.SFOLIO <> t2.SFOLIO
) t1_actualizado
ON (t2.UIDORDEN = t1_actualizado.UIDORDEN)
WHEN MATCHED THEN UPDATE SET
    t2.SFOLIO = t1_actualizado.SFOLIO;

-- PAGOSWEBINFOCLIENTES activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.PAGOSWEBINFOCOMPRADOR (
    UIDPAGOSWEBINFOCOMPRADOR,
    UIDORDEN,
    SNOMBRE,
    SAPELLIDOPATERNO,
    SAPELLIDOMATERNO,
    SEMAIL,
    STELEFONO,
    UIDUSUARIO,
    DTFECHACREACION
)
SELECT 
    t1.UIDPAGOSWEBINFOCOMPRADOR,
    t1.UIDORDEN,
    t1.SNOMBRE,
    t1.SAPELLIDOPATERNO,
    t1.SAPELLIDOMATERNO,
    t1.SEMAIL,
    t1.STELEFONO,
    t1.UIDUSUARIO,
    t1.DTFECHACREACION
FROM PREP_PAGOS.PAGOSWEBINFOCOMPRADOR t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSWEBINFOCOMPRADOR t2 
    ON t1.UIDPAGOSWEBINFOCOMPRADOR = t2.UIDPAGOSWEBINFOCOMPRADOR
WHERE t2.UIDPAGOSWEBINFOCOMPRADOR IS NULL;

-- PAGOSWEBINFOCLIENTES diferencias CAMPOS (PREP_PAGOSCONSULTAS vs PREP_PAGOS)
MERGE INTO PREP_PAGOSCONSULTAS.PAGOSWEBINFOCOMPRADOR t2
USING (
    SELECT 
        t1.UIDPAGOSWEBINFOCOMPRADOR,
        t1.SNOMBRE,
        t1.SAPELLIDOPATERNO,
        t1.SAPELLIDOMATERNO,
        t1.SEMAIL,
        t1.STELEFONO
    FROM PREP_PAGOS.PAGOSWEBINFOCOMPRADOR t1
    INNER JOIN PREP_PAGOSCONSULTAS.PAGOSWEBINFOCOMPRADOR t2 
        ON t1.UIDPAGOSWEBINFOCOMPRADOR = t2.UIDPAGOSWEBINFOCOMPRADOR
    WHERE t1.SNOMBRE <> t2.SNOMBRE
       OR t1.SAPELLIDOPATERNO <> t2.SAPELLIDOPATERNO
       OR t1.SAPELLIDOMATERNO <> t2.SAPELLIDOMATERNO
       OR t1.SEMAIL <> t2.SEMAIL
       OR t1.STELEFONO <> t2.STELEFONO
) cambios
ON (t2.UIDPAGOSWEBINFOCOMPRADOR = cambios.UIDPAGOSWEBINFOCOMPRADOR)
WHEN MATCHED THEN UPDATE SET
    t2.SNOMBRE = cambios.SNOMBRE,
    t2.SAPELLIDOPATERNO = cambios.SAPELLIDOPATERNO,
    t2.SAPELLIDOMATERNO = cambios.SAPELLIDOMATERNO,
    t2.SEMAIL = cambios.SEMAIL,
    t2.STELEFONO = cambios.STELEFONO;
	
-- PAGOSPAYPAL activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.PAGOSPAYPAL (
    UIDPAGOPAYPAL,
    UIDORDEN,
    UIDREFERENCIA,
    SIDPAGADOR,
    SNOMBRECOMPLETO,
    SCORREO,
    SESTATUS,
    DTFECHAPAGO,
    SIDPAGO
)
SELECT
    t1.UIDPAGOPAYPAL,
    t1.UIDORDEN,
    t1.UIDREFERENCIA,
    t1.SIDPAGADOR,
    t1.SNOMBRECOMPLETO,
    t1.SCORREO,
    t1.SESTATUS,
    t1.DTFECHAPAGO,
    t1.SIDPAGO
FROM PREP_PAGOS.PAGOSPAYPAL t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSPAYPAL t2 
    ON t1.UIDPAGOPAYPAL = t2.UIDPAGOPAYPAL
WHERE t2.UIDPAGOPAYPAL IS NULL;

-- PAGOSMERCADOPAGO activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.PAGOSMERCADOPAGO (
    UIDPAGOMERCADOPAGO,
    UIDORDEN,
    SIDPAGO,
    SESTATUS,
    SREFERENCIAEXTERNA,
    STIPOPAGO,
    SIDORDENCOMERCIAL,
    SIDSITIO,
    SMODOPROCESAMIENTO,
    SIDCUENTACOMERCIAL,
    DTFECHA
)
SELECT
    t1.UIDPAGOMERCADOPAGO,
    t1.UIDORDEN,
    t1.SIDPAGO,
    t1.SESTATUS,
    t1.SREFERENCIAEXTERNA,
    t1.STIPOPAGO,
    t1.SIDORDENCOMERCIAL,
    t1.SIDSITIO,
    t1.SMODOPROCESAMIENTO,
    t1.SIDCUENTACOMERCIAL,
    t1.DTFECHA
FROM PREP_PAGOS.PAGOSMERCADOPAGO t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSMERCADOPAGO t2 
    ON t1.UIDPAGOMERCADOPAGO = t2.UIDPAGOMERCADOPAGO
WHERE t2.UIDPAGOMERCADOPAGO IS NULL;

-- PAGOSBANORTE activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.PAGOSBANORTE (
    UIDPAGOBANORTE,
    UIDORDEN,
    SIDAFILIACION,
    SREFERENCIA,
    SNUMEROCONTROL,
    DTSOLICITUDCLIENTE,
    DTSOLICITUDAUTORIZADOR,
    DTRESPUESTAAUTORIZADOR,
    DTRESPUESTACLIENTE,
    SRESULTADOPAYWORKS,
    SCODIGOAUTORIZADOR,
    SCODIGORECHAZO,
    SCODIGOAPROBACION,
    STEXTOADICIONAL,
    SBANCOEMISOR,
    SMARCATARJETA,
    STIPOTARJETA,
    DTFECHACREACION
)
SELECT
    t1.UIDPAGOBANORTE,
    t1.UIDORDEN,
    t1.SIDAFILIACION,
    t1.SREFERENCIA,
    t1.SNUMEROCONTROL,
    t1.DTSOLICITUDCLIENTE,
    t1.DTSOLICITUDAUTORIZADOR,
    t1.DTRESPUESTAAUTORIZADOR,
    t1.DTRESPUESTACLIENTE,
    t1.SRESULTADOPAYWORKS,
    t1.SCODIGOAUTORIZADOR,
    t1.SCODIGORECHAZO,
    t1.SCODIGOAPROBACION,
    t1.STEXTOADICIONAL,
    t1.SBANCOEMISOR,
    t1.SMARCATARJETA,
    t1.STIPOTARJETA,
    t1.DTFECHACREACION
FROM PREP_PAGOS.PAGOSBANORTE t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSBANORTE t2 
    ON t1.UIDPAGOBANORTE = t2.UIDPAGOBANORTE
WHERE t2.UIDPAGOBANORTE IS NULL;

-- PAGOSCODI activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.PAGOSCODI (
    UIDPAGOCODI,
    UIDORDEN,
    SREFERENCIA,
    IIDENTIFICADOR,
    IBANCO,
    DTFECHA,
    SCADENA,
    SUSUARIO,
    SCONTRASENIA,
    DMONTO,
    STIPOPAGO,
    SINFORMACIONCLIENTE,
    ISUCURSAL,
    SESTATUSCODI,
    SDESCRIPCIONCODI,
    SFOLIOCODI,
    DTFECHACREACION,
    DTFECHAOPERACION,
    SESTATUS,
    BPAGADO,
    SFOLIOVENTA
)
SELECT
    t1.UIDPAGOCODI,
    t1.UIDORDEN,
    t1.SREFERENCIA,
    t1.IIDENTIFICADOR,
    t1.IBANCO,
    t1.DTFECHA,
    t1.SCADENA,
    t1.SUSUARIO,
    t1.SCONTRASENIA,
    t1.DMONTO,
    t1.STIPOPAGO,
    t1.SINFORMACIONCLIENTE,
    t1.ISUCURSAL,
    t1.SESTATUSCODI,
    t1.SDESCRIPCIONCODI,
    t1.SFOLIOCODI,
    t1.DTFECHACREACION,
    t1.DTFECHAOPERACION,
    t1.SESTATUS,
    t1.BPAGADO,
    t1.SFOLIOVENTA
FROM PREP_PAGOS.PAGOSCODI t1
LEFT JOIN PREP_PAGOSCONSULTAS.PAGOSCODI t2 
    ON t1.UIDPAGOCODI = t2.UIDPAGOCODI
WHERE t2.UIDPAGOCODI IS NULL;

---- sebas

INSERT INTO PAGOSCONSULTAS.PAGOSCODI (
    UIDPAGOCODI,
    UIDORDEN,
    SREFERENCIA,
    IIDENTIFICADOR,
    IBANCO,
    DTFECHA,
    SCADENA,
    SUSUARIO,
    SCONTRASENIA,
    DMONTO,
    STIPOPAGO,
    SINFORMACIONCLIENTE,
    ISUCURSAL,
    SESTATUSCODI,
    SDESCRIPCIONCODI,
    SFOLIOCODI,
    DTFECHACREACION
)
SELECT
    t1.UIDPAGOCODI,
    t1.UIDORDEN,
    t1.SREFERENCIA,
    t1.IIDENTIFICADOR,
    t1.IBANCO,
    t1.DTFECHA,
    t1.SCADENA,
    t1.SUSUARIO,
    t1.SCONTRASENIA,
    t1.DMONTO,
    t1.STIPOPAGO,
    t1.SINFORMACIONCLIENTE,
    t1.ISUCURSAL,
    t1.SESTATUSCODI,
    t1.SDESCRIPCIONCODI,
    t1.SFOLIOCODI,
    t1.DTFECHACREACION
FROM PAGOS.PAGOSCODI t1
LEFT JOIN PAGOSCONSULTAS.PAGOSCODI t2 
    ON t1.UIDPAGOCODI = t2.UIDPAGOCODI
WHERE t2.UIDPAGOCODI IS NULL;

----

-- LOGWEBHOOKS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.LOGWEBHOOKS (
    UIDLOGWEBHOOK,
    SIDNOTIFICACION,
    SACCION,
    SIDUSUARIO,
    SFECHACREACION,
    STIPO,
    SPAYLOAD,
    SIDORDEN,
    DTFECHATRANSACCION,
    SHEADERS,
    BVALIDADO
)
SELECT
    t1.UIDLOGWEBHOOK,
    t1.SIDNOTIFICACION,
    t1.SACCION,
    t1.SIDUSUARIO,
    t1.SFECHACREACION,
    t1.STIPO,
    t1.SPAYLOAD,
    t1.SIDORDEN,
    t1.DTFECHATRANSACCION,
    t1.SHEADERS,
    t1.BVALIDADO
FROM PREP_PAGOS.LOGWEBHOOKS t1
LEFT JOIN PREP_PAGOSCONSULTAS.LOGWEBHOOKS t2 
    ON t1.UIDLOGWEBHOOK = t2.UIDLOGWEBHOOK
WHERE t2.UIDLOGWEBHOOK IS NULL;

-- TRANSACCIONESWEBHOOKS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)PENDIENTESSS
INSERT INTO PREP_PAGOSCONSULTAS.TRANSACCIONESWEBHOOKS (
  UIDTRANSACCIONWEBHOOK,
  SIDNOTIFICACION,
  SPROVEDOR,
  IPROVEDOR,
  SESTATUS,
  SMONTO,
  SIDUSUARIO,
  BAPROVADO,
  DTFECHACREACION,
  DTFECHAMODIFICACION,
  SIDORDEN,
  SPAYLOAD,
  SIDPAGO,
  BPAGADO
)
SELECT
  t1.UIDTRANSACCIONWEBHOOK,
  t1.SIDNOTIFICACION,
  t1.SPROVEDOR,
  t1.IPROVEDOR,
  t1.SESTATUS,
  t1.SMONTO,
  t1.SIDUSUARIO,
  t1.BAPROVADO,
  t1.DTFECHACREACION,
  t1.DTFECHAMODIFICACION,
  t1.SIDORDEN,
  t1.SPAYLOAD,
  t1.SIDPAGO,
  t1.BPAGADO
FROM PREP_PAGOS.TRANSACCIONESWEBHOOKS t1
LEFT JOIN PREP_PAGOSCONSULTAS.TRANSACCIONESWEBHOOKS t2
  ON t1.UIDTRANSACCIONWEBHOOK = t2.UIDTRANSACCIONWEBHOOK
WHERE t2.UIDTRANSACCIONWEBHOOK IS NULL;

-- PARAMETROS activos no replicados (PREP_PAGOS vs PREP_PAGOSCONSULTAS)
INSERT INTO PREP_PAGOSCONSULTAS.PARAMETROS (
  SNOMBRE,
  SVALOR,
  BACTIVO,
  BBAJA,
  UIDPARAMETRO,
  BENCRIPTADO,
  SDESCRIPCION
)
SELECT
  t1.SNOMBRE,
  t1.SVALOR,
  t1.BACTIVO,
  t1.BBAJA,
  t1.UIDPARAMETRO,
  t1.BENCRIPTADO,
  t1.SDESCRIPCION
FROM PREP_PAGOS.PARAMETROS t1
LEFT JOIN PREP_PAGOSCONSULTAS.PARAMETROS t2
  ON t1.UIDPARAMETRO = t2.UIDPARAMETRO
WHERE t2.UIDPARAMETRO IS NULL;
-------SEBAS
INSERT INTO PREP_PAGOSCONSULTAS.PARAMETROS (
  SNOMBRE,
  SVALOR,
  BACTIVO,
  BBAJA,
  UIDPARAMETRO,
  BENCRIPTADO,
  SDESCRIPCION
)
SELECT
  t1.SNOMBRE,
  t1.SVALOR,
  t1.BACTIVO,
  t1.BBAJA,
  t1.UIDPARAMETRO,
  t1.BENCRIPTADO,
  t1.SDESCRIPCION
FROM PREP_PAGOS.PARAMETROS t1
LEFT JOIN PREP_PAGOSCONSULTAS.PARAMETROS t2
  ON t1.UIDPARAMETRO = t2.UIDPARAMETRO
WHERE t2.UIDPARAMETRO IS NULL and t1.UIDPARAMETRO <> t2 .UIDPARAMETRO;
-----
-- PARAMETROS diferencias campos (PREP_PAGOSCONSULTAS vs PREP_PAGOS)
MERGE INTO PREP_PAGOSCONSULTAS.PARAMETROS AS tgt
USING (
    SELECT 
      t1.UIDPARAMETRO,
      t1.SNOMBRE,
      t1.SVALOR,
      t1.BACTIVO,
      t1.BBAJA,
      t1.BENCRIPTADO,
      t1.SDESCRIPCION
    FROM PREP_PAGOS.PARAMETROS t1
    INNER JOIN PREP_PAGOSCONSULTAS.PARAMETROS t2
      ON t1.UIDPARAMETRO = t2.UIDPARAMETRO
    WHERE t1.BACTIVO = 1
      AND (
           t1.SNOMBRE     <> t2.SNOMBRE
        OR t1.SVALOR      <> t2.SVALOR
        OR t1.BACTIVO     <> t2.BACTIVO
        OR t1.BBAJA       <> t2.BBAJA
        OR t1.BENCRIPTADO <> t2.BENCRIPTADO
        OR t1.SDESCRIPCION<> t2.SDESCRIPCION
      )
) AS src
ON (tgt.UIDPARAMETRO = src.UIDPARAMETRO)
WHEN MATCHED THEN
  UPDATE SET
    tgt.SNOMBRE       = src.SNOMBRE,
    tgt.SVALOR        = src.SVALOR,
    tgt.BACTIVO       = src.BACTIVO,
    tgt.BBAJA         = src.BBAJA,
    tgt.BENCRIPTADO   = src.BENCRIPTADO,
    tgt.SDESCRIPCION  = src.SDESCRIPCION;